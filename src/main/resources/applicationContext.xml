<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/data/mongo
	http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd">

	<context:component-scan base-package="com.nemesis.api;org.codehaus.jackson.jaxrs" />

	<context:annotation-config />

	<!-- MongoTemplate for connecting and quering the documents in the database -->
	<mongo:db-factory host="localhost" port="27017"
		dbname="automation" />
	<mongo:mapping-converter id="converter"
		db-factory-ref="mongoDbFactory" />

	<!-- MongoDB GridFS Template -->
	<bean id="gridTemplate" class="org.springframework.data.mongodb.gridfs.GridFsTemplate">
		<constructor-arg ref="mongoDbFactory" />
		<constructor-arg ref="converter" />
	</bean>

	<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
		<constructor-arg name="mongoDbFactory" ref="mongoDbFactory" />
	</bean>

	<bean id="summaryTestsReportJobDetail"
		class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass"
			value="com.nemesis.api.scheduler.SummaryTestsReportJob" />
		<property name="durability" value="true" />
	</bean>

	<bean id="firstTrigger"
		class="com.nemesis.api.scheduler.PersistableCronTriggerFactoryBean">
		<property name="jobDetail" ref="summaryTestsReportJobDetail" />
		<!-- 0 0 5 * * ? run every morning at 5:00 AM -->
		<!-- 0/5 * * * * ? run every 5 seconds -->
		<property name="cronExpression" value="0 0 8 * * ?" />
	</bean>

	<bean id="quartzScheduler"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">

		<!-- This name is persisted as SCHED_NAME in db. for local testing could 
			change to unique name to avoid collision with dev server -->
		<property name="schedulerName" value="quartzScheduler" />

		<!-- Will update database cron triggers to what is in this jobs file on 
			each deploy. Replaces all previous trigger and job data that was in the database. 
			YMMV -->
		<property name="overwriteExistingJobs" value="true" />

		<property name="autoStartup" value="true" />
		<property name="applicationContextSchedulerContextKey" value="applicationContext" />
		<property name="jobFactory">
			<bean class="com.nemesis.api.scheduler.AutowiringSpringBeanJobFactory" />
		</property>

		<!-- NOTE: Must add both the jobDetail and trigger to the scheduler! -->
		<property name="jobDetails">
			<list>
				<ref bean="summaryTestsReportJobDetail" />
			</list>
		</property>
		<property name="triggers">
			<list>
				<ref bean="firstTrigger" />
			</list>
		</property>
	</bean>

	<bean id="testAttachmentResourceImpl"
		class="com.nemesis.api.resource.impl.TestAttachmentResourceImpl">
		<constructor-arg type="java.lang.String" value="/data1/tomcat7/static/" />
		<constructor-arg type="java.lang.String" value="http://localhost/files/" />
	</bean>

	<!-- SPRING SECURITY SETUP -->

	<bean id="userService" class="com.nemesis.api.service.impl.UserServiceImpl">
	</bean>

	<bean id="userRepository" class="com.nemesis.api.repository.impl.UserRepositoryImpl">
	</bean>

	<bean id="passwordEncoder" class="com.nemesis.api.encoder.SaltedSHA256PasswordEncoder">
		<constructor-arg value="secret" />
	</bean>

	<bean id="defaultUsersInitializer" class="com.nemesis.api.initializer.DefaultUsersInitializer"
		init-method="initDefaultUsers">
		<constructor-arg ref="passwordEncoder" />
		<constructor-arg ref="userRepository" />
	</bean>

	<security:authentication-manager id="authenticationManager">
		<security:authentication-provider
			user-service-ref="userService">
			<security:password-encoder ref="passwordEncoder"></security:password-encoder>
		</security:authentication-provider>
	</security:authentication-manager>

	<security:http realm="Protected API" use-expressions="true"
		auto-config="false" create-session="stateless" entry-point-ref="unauthorizedEntryPoint"
		authentication-manager-ref="authenticationManager">
		<security:custom-filter ref="authenticationTokenProcessingFilter"
			position="FORM_LOGIN_FILTER" />

		<security:intercept-url pattern="/api/users/login"
			access="permitAll" />

		<security:intercept-url method="GET" pattern="/api/suites/**"
			access="hasRole('view')" />
		<security:intercept-url method="PUT" pattern="/api/suites/**"
			access="hasRole('edit')" />
		<security:intercept-url method="POST" pattern="/api/suites/**"
			access="hasRole('create')" />
		<security:intercept-url method="DELETE"
			pattern="/api/suites/**" access="hasRole('delete')" />

		<security:intercept-url method="GET"
			pattern="/api/suite/chart/**" access="hasRole('view')" />
		<security:intercept-url method="PUT"
			pattern="/api/suite/chart/**" access="hasRole('edit')" />
		<security:intercept-url method="POST"
			pattern="/api/suite/chart/**" access="hasRole('create')" />
		<security:intercept-url method="DELETE"
			pattern="/api/suite/chart/**" access="hasRole('delete')" />

		<security:intercept-url method="GET"
			pattern="/api/sprints/**" access="hasRole('view')" />
		<security:intercept-url method="PUT"
			pattern="/api/sprints/**" access="hasRole('edit')" />
		<security:intercept-url method="POST"
			pattern="/api/sprints/**" access="hasRole('create')" />
		<security:intercept-url method="DELETE"
			pattern="/api/sprints/**" access="hasRole('delete')" />

		<security:intercept-url method="GET" pattern="/api/attach/**"
			access="hasRole('view')" />
		<security:intercept-url method="PUT" pattern="/api/attach/**"
			access="hasRole('edit')" />
		<security:intercept-url method="POST" pattern="/api/attach/**"
			access="hasRole('create')" />
		<security:intercept-url method="DELETE"
			pattern="/api/attach/**" access="hasRole('delete')" />

		<security:intercept-url method="GET"
			pattern="/api/testplans/**" access="hasRole('view')" />
		<security:intercept-url method="PUT"
			pattern="/api/testplans/**" access="hasRole('edit')" />
		<security:intercept-url method="POST"
			pattern="/api/testplans/**" access="hasRole('create')" />
		<security:intercept-url method="DELETE"
			pattern="/api/testplans/**" access="hasRole('delete')" />

		<security:intercept-url method="GET" pattern="/api/tests/**"
			access="hasRole('view')" />
		<security:intercept-url method="PUT" pattern="/api/tests/**"
			access="hasRole('edit')" />
		<security:intercept-url method="POST" pattern="/api/tests/**"
			access="hasRole('create')" />
		<security:intercept-url method="DELETE"
			pattern="/api/tests/**" access="hasRole('delete')" />

	</security:http>

	<bean id="unauthorizedEntryPoint" class="com.nemesis.api.filter.UnauthorizedEntryPoint" />

	<bean class="com.nemesis.api.filter.AuthenticationTokenProcessingFilter"
		id="authenticationTokenProcessingFilter">
		<constructor-arg ref="userService" />
	</bean>


</beans>